#!/usr/bin/env ruby
# frozen_string_literal: true

require_relative '../lib/hacker_news_scraper'
require_relative '../lib/filters/title_length_filter'

# rubocop:disable Metrics/MethodLength
def run
  loop do
    scraper = HackerNewsScraper.new
    scraper.scrape
    entries = scraper.entries
    main_menu_user_choice = main_menu

    case main_menu_user_choice
    when 1
      puts entries
    when 2
      filter_user_choice = filters_menu
      result = filter_program(filter_user_choice, scraper)
      puts result
    when 3
      puts 'Exiting...'
      exit
    else
      puts 'Invalid option. Please try again.'
    end
  end
end
# rubocop:enable Metrics/MethodLength

private

# ------------- user input methods -------------
def main_menu
  puts 'HackerNews Scraper'
  puts '1. Scrape without filters'
  puts '2. Apply filters'
  puts '3. Exit'
  print 'Enter your choice: '
  gets.chomp.to_i
end

def filters_menu
  puts 'Filter Options:'
  puts '1. Filter entries with more than five words in the title ordered by the number of comments first.'
  puts '2. Filter entries with less than or equal to five words in the title ordered by points'
  puts '3. Exit'
  gets.chomp.to_i
end

# ------------- filters program -------------
def filter_program(filter_choice, scraper)
  case filter_choice
  when 1
    filter_by_title_length_greater_than_five_and_order_by_comments(scraper)
  when 2
    filter_by_title_length_less_or_equal_than_five_and_order_by_points(scraper)
  when 3
    puts 'Exiting...'
    exit
  else
    handle_invalid_option
  end
end

def filter_by_title_length_greater_than_five_and_order_by_comments(scraper)
  scraper.filtered_entries_by_title_ordered_by_n_of_comments ||
    Filters::TitleLengthFilter.call(scraper.entries, :>, 5)
                              .sort_by { |entry| entry[:n_of_comments] }.reverse
end

def filter_by_title_length_less_or_equal_than_five_and_order_by_points(scraper)
  scraper.filtered_entries_by_title_ordered_by_points ||
    Filters::TitleLengthFilter.call(scraper.entries, :<=, 5)
                              .sort_by { |entry| entry[:points] }.reverse
end

def handle_invalid_option
  puts 'Invalid option. Please try again.'
  nil
end

run
